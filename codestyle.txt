
--- Go Code Style Guidelines ---

Identifier Prefixes

runIt - package goroutine function
   go runIt(...)

Since it may be hard to infer the scope of lowercase identifiers,
we use these conventions for clarity in non-exported terms.

kConst - package/function constant
   const kDumbPi = 3.142
eConst - package/function enumerated constant
   const ( eOne=iota; eTwo; eThree; )
tType - package/function type
   type tStuff struct {...}
sVar - package variable (s = static)
   var sWhat string
aVar - function variable; exceptions: err & ok return values
   aFile, err := Open(...)
   for a := 0; a < kMax; a++ {} // instead of i
iVar - function argument (i = input)
   func workOn(iWhat string) {...}
o - function "receiver" argument, aka this (o = object)
   func (o *tType) WorkOn()
   func runIt(o *tType) // go s.runIt() not allowed
fFunc - function "closure"
cVar - closure variable or argument
   fSum := func(cNum int) { cSum := cNum + aNum }

Since these are recognized by context, no prefix for:

fmt.Printf - imported package
s.var - struct member
youNameIt() - package function

Code Format

Package constants and variables go at the top of their source files,
followed by func init() (if used).

Type, function, and variable definitions appear roughtly in order of invocation
in source files. Types are defined before the functions that operate on them.
Definitions therefore usually appear after first use.

Indents are 3 spaces.

Since this is ubiquitous, it goes on one line:
   if err != nil { panic(err) }

Dense conditionals
   if test {
      stuff()
   } else {
      other()
   }

In lieu of (v = t ? a : b)
   v = b; if t { v = a }

